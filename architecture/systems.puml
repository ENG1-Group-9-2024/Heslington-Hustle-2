@startuml

package systems {
    class AnimationSystem {
        - batch: SpriteBatch
        - gameState: GameState
        - am: ComponentMapper<AnimationComponent>
        - fm: ComponentMapper<FixtureComponent>
        - pm: ComponentMapper<PositionComponent>
        + AnimationSystem(batch: SpriteBatch, gameState: GameState)
        + update(deltaTime: float): void
        - processEntity(entity: Entity, deltaTime: float): void
    }

    class CounterUpdateSystem {
        - gameState: GameState
        - cm: ComponentMapper<CounterComponent>
        + CounterUpdateSystem(gameState: GameState)
        - processEntity(entity: Entity, deltaTime: float): void
    }

    class DebugSystem {
        - shapeDrawer: ShapeDrawer
        - hm: ComponentMapper<HitboxComponent>
        - fm: ComponentMapper<FixtureComponent>
        - interactables: ImmutableArray<Entity>
        - playerEntity: Entity
        + DebugSystem(shapeDrawer: ShapeDrawer)
        + addedToEngine(engine: Engine): void
        + update(deltaTime: float): void
    }

    class InteractionOverlayRenderingSystem {
        - batch: SpriteBatch
        - font: BitmapFont
        - shapeDrawer: ShapeDrawer
        - gameState: GameState
        - elapsed: float
        + InteractionOverlayRenderingSystem(batch: SpriteBatch, font: BitmapFont, shapeDrawer: ShapeDrawer, gameState: GameState)
        + update(deltaTime: float): void
    }

    class MapRenderingSystem {
        - camera: OrthographicCamera
        - renderer: OrthogonalTiledMapRenderer
        + MapRenderingSystem(tiledMap: TiledMap, camera: OrthographicCamera)
        + update(deltaTime: float): void
    }

    class PlayerInputSystem {
        - gameState: GameState
        - playerEntity: Entity
        - velocity: Vector2
        - pm: ComponentMapper<PlayerComponent>
        - fm: ComponentMapper<FixtureComponent>
        - am: ComponentMapper<AnimationComponent>
        + PlayerInputSystem(gameState: GameState)
        + addedToEngine(engine: Engine): void
        + update(deltaTime: float): void
    }

    class PlayerInteractionSystem {
        - gameState: GameState
        - playerEntity: Entity
        - interactables: ImmutableArray<Entity>
        - plm: ComponentMapper<PlayerComponent>
        - am: ComponentMapper<AnimationComponent>
        - im: ComponentMapper<InteractionComponent>
        - hm: ComponentMapper<HitboxComponent>
        - fm: ComponentMapper<FixtureComponent>
        + PlayerInteractionSystem(gameState: GameState)
        + addedToEngine(engine: Engine): void
        + update(deltaTime: float): void
    }

    class StaticRenderingSystem {
        - batch: SpriteBatch
        - tm: ComponentMapper<TextureComponent>
        - pm: ComponentMapper<PositionComponent>
        + StaticRenderingSystem(batch: SpriteBatch)
        + processEntity(entity: Entity, deltaTime: float): void
    }

    class TooltipRenderingSystem {
        - font: BitmapFont
        - shapeDrawer: ShapeDrawer
        - batch: SpriteBatch
        - gameState: GameState
        - hm: ComponentMapper<HitboxComponent>
        - tm: ComponentMapper<TooltipComponent>
        - fm: ComponentMapper<FixtureComponent>
        + TooltipRenderingSystem(font: BitmapFont, shapeDrawer: ShapeDrawer, batch: SpriteBatch, gameState: GameState)
        + addedToEngine(engine: Engine): void
        + update(deltaTime: float): void
    }
}
@enduml